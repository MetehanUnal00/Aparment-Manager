-- V1__Initial_schema.sql
-- Initial schema for Apartment Manager System
-- This represents the baseline schema after moving from Hibernate auto-update to Flyway

-- Create users table
CREATE TABLE IF NOT EXISTS users (
    id BIGSERIAL PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    role VARCHAR(20) NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT users_role_check CHECK (role IN ('ADMIN', 'MANAGER', 'VIEWER'))
);

-- Create apartment_buildings table
CREATE TABLE IF NOT EXISTS apartment_buildings (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    number_of_floors INTEGER NOT NULL,
    total_flats INTEGER NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create user_building_assignments table (many-to-many relationship)
CREATE TABLE IF NOT EXISTS user_building_assignments (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    building_id BIGINT NOT NULL,
    assigned_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user_assignment FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_building_assignment FOREIGN KEY (building_id) REFERENCES apartment_buildings(id) ON DELETE CASCADE,
    CONSTRAINT unique_user_building UNIQUE (user_id, building_id)
);

-- Create flats table
CREATE TABLE IF NOT EXISTS flats (
    id BIGSERIAL PRIMARY KEY,
    flat_number VARCHAR(10) NOT NULL,
    number_of_rooms INTEGER NOT NULL,
    area_sq_meters DECIMAL(10,2) NOT NULL,
    apartment_building_id BIGINT NOT NULL,
    tenant_name VARCHAR(100),
    tenant_contact VARCHAR(50),
    tenant_email VARCHAR(100),
    monthly_rent DECIMAL(10,2),
    security_deposit DECIMAL(10,2),
    tenant_move_in_date TIMESTAMP,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_flat_building FOREIGN KEY (apartment_building_id) REFERENCES apartment_buildings(id) ON DELETE CASCADE,
    CONSTRAINT unique_flat_number_per_building UNIQUE (apartment_building_id, flat_number)
);

-- Create payments table
CREATE TABLE IF NOT EXISTS payments (
    id BIGSERIAL PRIMARY KEY,
    flat_id BIGINT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date DATE NOT NULL,
    description VARCHAR(255),
    payment_method VARCHAR(50),
    transaction_reference VARCHAR(100),
    version BIGINT NOT NULL DEFAULT 0,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_payment_flat FOREIGN KEY (flat_id) REFERENCES flats(id) ON DELETE CASCADE,
    CONSTRAINT payments_amount_positive CHECK (amount > 0)
);

-- Create monthly_dues table
CREATE TABLE IF NOT EXISTS monthly_dues (
    id BIGSERIAL PRIMARY KEY,
    flat_id BIGINT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    due_date DATE NOT NULL,
    year INTEGER NOT NULL,
    month INTEGER NOT NULL,
    is_paid BOOLEAN NOT NULL DEFAULT FALSE,
    paid_date DATE,
    description VARCHAR(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_due_flat FOREIGN KEY (flat_id) REFERENCES flats(id) ON DELETE CASCADE,
    CONSTRAINT unique_flat_year_month UNIQUE (flat_id, year, month),
    CONSTRAINT monthly_dues_amount_positive CHECK (amount > 0),
    CONSTRAINT monthly_dues_month_valid CHECK (month >= 1 AND month <= 12)
);

-- Create expenses table
CREATE TABLE IF NOT EXISTS expenses (
    id BIGSERIAL PRIMARY KEY,
    building_id BIGINT NOT NULL,
    expense_category VARCHAR(50) NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    expense_date DATE NOT NULL,
    description VARCHAR(255) NOT NULL,
    notes TEXT,
    vendor_name VARCHAR(100),
    invoice_number VARCHAR(50),
    recorded_by_user_id BIGINT NOT NULL,
    is_recurring BOOLEAN NOT NULL DEFAULT FALSE,
    recurrence_frequency VARCHAR(20),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_expense_building FOREIGN KEY (building_id) REFERENCES apartment_buildings(id) ON DELETE CASCADE,
    CONSTRAINT fk_expense_recorded_by FOREIGN KEY (recorded_by_user_id) REFERENCES users(id),
    CONSTRAINT expenses_amount_positive CHECK (amount > 0),
    CONSTRAINT expenses_category_check CHECK (expense_category IN ('MAINTENANCE', 'UTILITIES', 'CLEANING', 'SECURITY', 'REPAIRS', 'INSURANCE', 'TAXES', 'MANAGEMENT', 'LANDSCAPING', 'ELEVATOR', 'SUPPLIES', 'LEGAL', 'ACCOUNTING', 'MARKETING', 'OTHER'))
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_user_building_user_id ON user_building_assignments(user_id);
CREATE INDEX IF NOT EXISTS idx_user_building_building_id ON user_building_assignments(building_id);
CREATE INDEX IF NOT EXISTS idx_flats_building_id ON flats(apartment_building_id);
CREATE INDEX IF NOT EXISTS idx_flats_is_active ON flats(is_active);
CREATE INDEX IF NOT EXISTS idx_payments_flat_id ON payments(flat_id);
CREATE INDEX IF NOT EXISTS idx_payments_date ON payments(payment_date);
CREATE INDEX IF NOT EXISTS idx_monthly_dues_flat_id ON monthly_dues(flat_id);
CREATE INDEX IF NOT EXISTS idx_monthly_dues_year_month ON monthly_dues(year, month);
CREATE INDEX IF NOT EXISTS idx_monthly_dues_is_paid ON monthly_dues(is_paid);
CREATE INDEX IF NOT EXISTS idx_expense_building_date ON expenses(building_id, expense_date);
CREATE INDEX IF NOT EXISTS idx_expense_category ON expenses(expense_category);

-- Add comments for documentation
COMMENT ON TABLE users IS 'System users with different roles (ADMIN, MANAGER, VIEWER)';
COMMENT ON TABLE apartment_buildings IS 'Apartment buildings managed by the system';
COMMENT ON TABLE user_building_assignments IS 'Many-to-many relationship between users and buildings they manage';
COMMENT ON TABLE flats IS 'Individual flats/apartments within buildings';
COMMENT ON TABLE payments IS 'Payment records for flats with optimistic locking';
COMMENT ON TABLE monthly_dues IS 'Monthly dues/charges for each flat';
COMMENT ON TABLE expenses IS 'Expenses incurred by apartment buildings';

COMMENT ON COLUMN flats.is_active IS 'Soft delete flag - false means the flat is logically deleted';
COMMENT ON COLUMN payments.version IS 'Version field for optimistic locking';
COMMENT ON COLUMN monthly_dues.is_paid IS 'Whether this due has been paid';
COMMENT ON COLUMN expenses.is_recurring IS 'Whether this is a recurring expense';