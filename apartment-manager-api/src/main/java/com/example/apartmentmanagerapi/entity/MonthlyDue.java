package com.example.apartmentmanagerapi.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * MonthlyDue entity represents the monthly dues/rent for each flat.
 * This entity is automatically generated by scheduled tasks on the 1st of each month.
 * 
 * The unique constraint on (flat_id, due_date) prevents duplicate dues for the same flat and month,
 * ensuring idempotency in the scheduled task that generates these records.
 */
@Entity
@Table(name = "monthly_dues", 
    uniqueConstraints = {
        @UniqueConstraint(columnNames = {"flat_id", "due_date"}, 
            name = "uk_flat_due_date")
    }
)
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MonthlyDue {
    
    /**
     * Unique identifier for the monthly due record
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    /**
     * The flat this monthly due belongs to.
     * Many monthly dues can belong to one flat (one-to-many relationship).
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "flat_id", nullable = false)
    private Flat flat;
    
    /**
     * The amount due for this month.
     * Using BigDecimal for precise monetary calculations.
     * This could be the flat's base rent plus any additional charges.
     */
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal dueAmount;
    
    /**
     * The date when this payment is due (typically the 1st of the month).
     * Part of the unique constraint to prevent duplicate monthly dues.
     */
    @Column(name = "due_date", nullable = false)
    private LocalDate dueDate;
    
    /**
     * Status of this monthly due payment
     */
    @Enumerated(EnumType.STRING)
    @Column(nullable = false, length = 20)
    @Builder.Default
    private DueStatus status = DueStatus.UNPAID;
    
    /**
     * Reference to the payment if this due has been paid.
     * Null if unpaid, references the Payment record when paid.
     */
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "payment_id")
    private Payment payment;
    
    /**
     * Date when the payment was actually made (if paid)
     * Different from due date to track late payments
     */
    @Column(name = "paid_date")
    private LocalDate paidDate;
    
    /**
     * Additional charges description (if any)
     * For example: "Utilities: $50, Maintenance: $25"
     */
    @Column(name = "additional_charges_description", columnDefinition = "TEXT")
    private String additionalChargesDescription;
    
    /**
     * General description of what this due is for
     * For example: "Monthly maintenance fee for January 2024"
     */
    @Column(name = "due_description", columnDefinition = "TEXT")
    private String dueDescription;
    
    /**
     * Amount that has been paid towards this due
     * Used for partial payments tracking
     */
    @Column(name = "paid_amount", precision = 10, scale = 2)
    @Builder.Default
    private BigDecimal paidAmount = BigDecimal.ZERO;
    
    /**
     * Date when payment was received (different from paidDate which tracks full payment)
     * Used for payment allocation tracking
     */
    @Column(name = "payment_date")
    private LocalDateTime paymentDate;
    
    /**
     * Base rent amount (before any additional charges)
     * Useful for reporting and calculations
     */
    @Column(name = "base_rent", precision = 10, scale = 2)
    private BigDecimal baseRent;
    
    /**
     * Additional charges amount (utilities, maintenance, etc.)
     * dueAmount = baseRent + additionalCharges
     */
    @Column(name = "additional_charges", precision = 10, scale = 2)
    private BigDecimal additionalCharges;
    
    /**
     * Timestamp when this record was created
     * Typically when the scheduled task runs
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    
    /**
     * Timestamp when this record was last updated
     * Updated when payment status changes
     */
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    /**
     * Automatically set creation timestamp before persisting
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
        if (status == null) {
            status = DueStatus.UNPAID;
        }
    }
    
    /**
     * Automatically update the timestamp before updating
     */
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
    
    /**
     * Status options for monthly dues
     */
    public enum DueStatus {
        UNPAID("Unpaid"),          // Due not yet paid
        PAID("Paid"),              // Due paid in full
        PARTIALLY_PAID("Partially Paid"), // Due partially paid (future feature)
        OVERDUE("Overdue"),        // Past due date and unpaid
        WAIVED("Waived"),          // Due waived by management
        CANCELLED("Cancelled");    // Due cancelled by admin
        
        private final String displayName;
        
        DueStatus(String displayName) {
            this.displayName = displayName;
        }
        
        public String getDisplayName() {
            return displayName;
        }
    }
    
    /**
     * Helper method to check if this due is overdue
     * @return true if the due date has passed and status is UNPAID
     */
    public boolean isOverdue() {
        return status == DueStatus.UNPAID && 
               dueDate != null && 
               LocalDate.now().isAfter(dueDate);
    }
}